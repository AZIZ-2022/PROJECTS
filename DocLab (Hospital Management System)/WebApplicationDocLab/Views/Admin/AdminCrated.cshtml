@model WebApplicationDocLab.Models.User_Info
@using WebApplicationDocLab.Models

@{
    ViewBag.Title = "AdminCrated";
    Layout = "~/Views/_LayoutPageAdminIndex.cshtml";
}

<link href="~/Page/css/AdminCrated.css" rel="stylesheet">
<h2>Admin Create</h2>

@using (Html.BeginForm("AdminCrated", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(x => x.Title, new { @class = "form-label" })
                    @Html.DropDownListFor(x => x.Title, new SelectList(new[] { "Dr.", "Prof.", "Mr.", "Ms." }), "--Select Title--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(x => x.Gender, new { @class = "form-label" })
                    @Html.DropDownListFor(x => x.Gender, new SelectList(Enum.GetValues(typeof(GenderType))), "--Select Gender--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, new { @class = "form-label" })
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, new { @class = "form-label" })
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(x => x.DateOfBirth, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
                    @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(x => x.BloodGroup, new { @class = "form-label" })
                    @Html.DropDownListFor(x => x.BloodGroup, new SelectList(Enum.GetValues(typeof(BloodGroupType))), "--Select Blood Group--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.BloodGroup, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.NID, new { @class = "form-label" })
                    @Html.EditorFor(model => model.NID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.RegistrationNo, new { @class = "form-label" })
                    @Html.EditorFor(model => model.RegistrationNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RegistrationNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Department, new { @class = "form-label" })
                    @Html.EditorFor(model => model.Department, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(x => x.DocType, "Doctor Type", new { @class = "form-label" })
                    @Html.DropDownListFor(x => x.DocType, (SelectList)ViewBag.DoctorTypeName, "Select Doctor Type", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.DocType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", required = "required", type = "password" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", required = "required", type = "password" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Status, new { @class = "form-label" })
                    @Html.DropDownListFor(x => x.Status, new SelectList(Enum.GetValues(typeof(UserStatus))), "--Select Status--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="ImageFile">Profile Image</label>
                    <input type="file" id="ImageFile" name="ImageFile" class="form-control" accept="image/AdminImage/*" required />
                    <small class="form-text text-muted">Please upload a clear photo of yourself</small>
                    @if (Model != null && !string.IsNullOrEmpty(Model.Image))
                    {
                        <div class="mt-2">
                            <img src="~/image/AdminImage/@Model.Image" alt="Current Profile Image" width="100" class="img-thumbnail" />
                            <input type="hidden" name="image" value="@Model.Image" />
                        </div>
                    }
                    @Html.ValidationMessage("ImageFile", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Address, new { @class = "form-label" })
                    @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = "3", required = "required" })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-12 d-flex justify-content-between">
                <button type="button" id="clearForm" class="btn btn-secondary">
                    <i class="fas fa-eraser"></i> Clear Form
                </button>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-user-plus"></i> Create User
                </button>
                <div>
                    <a href="@Url.Action("Index")" class="btn btn-outline-dark">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>
}
<br />
<br />
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script>
    $(document).ready(function () {
        // Form clear button functionality
        $('#clearForm').click(function () {
            if (confirm('Are you sure you want to clear all form data?')) {
                $('input[type="text"], input[type="password"], input[type="date"], input[type="email"], input[type="file"], textarea').val('');
                $('select').prop('selectedIndex', 0);
                $('.img-thumbnail').remove();
            }
        });

        // Password match validation
        $('#ConfirmPassword').on('keyup', function () {
            if ($('#Password').val() != $('#ConfirmPassword').val()) {
                $('#ConfirmPassword').addClass('is-invalid');
            } else {
                $('#ConfirmPassword').removeClass('is-invalid');
            }
        });

        // Image preview functionality
        $('#ImageFile').change(function (e) {
            if (this.files && this.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('.img-thumbnail').remove();
                    $('#ImageFile').after('<div class="mt-2"><img src="' + e.target.result + '" alt="Preview" width="100" class="img-thumbnail" /></div>');
                }
                reader.readAsDataURL(this.files[0]);
            }
        });
    });
</script>

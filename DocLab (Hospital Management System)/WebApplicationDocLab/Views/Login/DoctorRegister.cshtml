@model WebApplicationDocLab.Models.User_Info
@using WebApplicationDocLab.Models
@{
    ViewBag.Title = "DoctorRegister";
    Layout = "~/Views/_LayoutPageLogin.cshtml";
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

}

<h2 class="text-center mb-4">Doctor Registration</h2>
<div class="form-container">
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-dismissible fade show validation-summary" role="alert">
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    <div class="container">
        @using (Html.BeginForm("DoctorRegister", "Login", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "novalidate", id = "registerForm" }))
        {
            @Html.AntiForgeryToken()
            <div id="errorMessages" class="alert alert-danger d-none" role="alert"></div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.FirstName)
                    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.LastName)
                    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Title)
                    @Html.DropDownListFor(x => x.Title, new SelectList(new[] { "Dr.", "Prof.", "Mr.", "Ms." }), "--Select Title--", new { @class = "form-control", required = "required" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Gender)
                    @Html.DropDownListFor(x => x.Gender, new SelectList(Enum.GetValues(typeof(GenderType))), "--Select Gender--", new { @class = "form-control", required = "required" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Email)
                @Html.TextBoxFor(x => x.Email, new { @class = "form-control", type = "email", required = "required" })
                @Html.ValidationMessageFor(x => x.Email, "", new { @class = "text-danger" })
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Password)
                    @Html.PasswordFor(x => x.Password, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.ConfirmPassword)
                    @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Phone)
                @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", required = "required", pattern = @"\d{11}" })
                @Html.ValidationMessageFor(x => x.Phone, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.BloodGroup)
                @Html.DropDownListFor(x => x.BloodGroup, new SelectList(Enum.GetValues(typeof(BloodGroupType))), "--Select Blood Group--", new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(x => x.BloodGroup, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.DateOfBirth)
                @Html.TextBoxFor(x => x.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
                @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Address)
                @Html.TextAreaFor(x => x.Address, new { @class = "form-control", rows = 3, required = "required" })
                @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.NID)
                    @Html.TextBoxFor(x => x.NID, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.NID, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.RegistrationNo)
                    @Html.TextBoxFor(x => x.RegistrationNo, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.RegistrationNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Department)
                    @Html.TextBoxFor(x => x.Department, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Department, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.DocType, "Doctor Type")
                    @*@Html.DropDownListFor(x => x.DoctorType, (SelectList)ViewBag.DoctorTypeName, "Select Doctor Type", new { @class = "form-control", required = "required" })*@
                    @Html.DropDownListFor(x => x.DocType, (SelectList)ViewBag.DoctorTypeName, "Select Doctor Type", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.DocType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                <label for="ImageFile">Profile Image</label>
                <input type="file" id="ImageFile" name="ImageFile" class="form-control" accept="image/DoctorImage/*" required />
                <small class="form-text text-muted">Please upload a clear photo of yourself</small>
                @if (Model != null && !string.IsNullOrEmpty(Model.Image))
                {
                    <div class="mt-2">
                        <img src="~/image/DoctorImage/@Model.Image" alt="Current Profile Image" width="100" class="img-thumbnail" />
                        <input type="hidden" name="image" value="@Model.Image" />
                    </div>
                }
                @Html.ValidationMessage("ImageFile", "", new { @class = "text-danger" })
            </div>

            @Html.HiddenFor(x => x.UserType, new { @Value = "Doctor" })
            @Html.HiddenFor(x => x.Status, new { @Value = "Inactive" })

            <div class="text-center">
                <input type="submit" value="Register" class="btn btn-primary px-5" />
            </div>
        }
        <div class="text-center mt-3">
            <p>Already have an account? <a href="@Url.Action("Login", "Login")">Login here</a></p>
        </div>
    </div>

    <script>
        document.getElementById("registerForm").addEventListener("submit", function (e) {
            const errors = [];
            const showError = (msg) => errors.push(msg);

            const FirstName = document.getElementById("FirstName")?.value.trim();
            const LastName = document.getElementById("LastName")?.value.trim();
            const Phone = document.getElementById("Phone")?.value.trim();
            const BloodGroup = document.getElementById("BloodGroup")?.value.trim();
            const DateOfBirth = document.getElementById("DateOfBirth")?.value.trim();
            const Address = document.getElementById("Address")?.value.trim();
            const NID = document.getElementById("NID")?.value.trim();
            const RegistrationNo = document.getElementById("RegistrationNo")?.value.trim();
            const username = document.getElementById("Email")?.value.trim();
            const password = document.getElementById("Password")?.value.trim();
            const ConfirmPassword = document.getElementById("ConfirmPassword")?.value.trim();
            const DocType = document.getElementById("DocType")?.value.trim();
            const ImageFile = document.getElementById("ImageFile")?.files[0];

            if (!FirstName || !LastName) {
                showError("First Name and Last Name are required.");
            } else {
                if (!/^[a-zA-Z]+$/.test(FirstName)) showError("First Name must contain only letters.");
                if (!/^[a-zA-Z]+$/.test(LastName)) showError("Last Name must contain only letters.");
            }

            if (!/^\d{11}$/.test(Phone)) {
                showError("Phone number must be exactly 11 digits.");
            }

            if (!BloodGroup) showError("Blood Group is required.");
            if (!DateOfBirth) showError("Date of Birth is required.");
            if (!Address) showError("Address is required.");
            if (!DocType) showError("Doctor Type is required.");
            if (!username) showError("Email is required.");
            if (!password) showError("Password is required.");
            if (!ConfirmPassword) showError("Confirm Password is required.");
            if (password !== ConfirmPassword) showError("Passwords do not match.");
            if (!ImageFile) showError("Please upload an image.");

            const errorContainer = document.getElementById("errorMessages");
            if (errors.length > 0) {
                e.preventDefault();
                errorContainer.innerHTML = errors.map(err => `<div>${err}</div>`).join('');
                errorContainer.classList.remove("d-none");
            } else {
                errorContainer.classList.add("d-none");
            }
        });
    </script>


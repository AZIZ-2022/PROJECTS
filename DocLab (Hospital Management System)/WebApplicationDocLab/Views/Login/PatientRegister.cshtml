@model WebApplicationDocLab.Models.User_Info
@using WebApplicationDocLab.Models
@{
    ViewBag.Title = "PatientRegister";
    Layout = "~/Views/_LayoutPageLogin.cshtml";
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
}

<h2 class="text-center mb-4">Patient Registration</h2>

<div class="container">
    @using (Html.BeginForm("PatientRegister", "Login", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", id = "registerForm" }))
    {
        @Html.AntiForgeryToken()
        <div id="errorMessages" class="alert alert-danger d-none" role="alert"></div>

        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(x => x.FirstName, htmlAttributes: new { @class = "form-label" })
                @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(x => x.FirstName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(x => x.LastName, htmlAttributes: new { @class = "form-label" })
                @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(x => x.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(x => x.Email, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(x => x.Email, new { @class = "form-control", type = "email", required = "required" })
            @Html.ValidationMessageFor(x => x.Email, "", new { @class = "text-danger" })
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(x => x.Password, htmlAttributes: new { @class = "form-label" })
                @Html.PasswordFor(x => x.Password, new { @class = "form-control", required = "required", minlength = "6" })
                @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(x => x.ConfirmPassword, htmlAttributes: new { @class = "form-label" })
                @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control", required = "required", minlength = "6" })
                @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(x => x.Phone, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", required = "required", pattern = @"\d{10,15}" })
            @Html.ValidationMessageFor(x => x.Phone, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(x => x.Gender, htmlAttributes: new { @class = "form-label" })
            @Html.DropDownListFor(x => x.Gender, new SelectList(Enum.GetValues(typeof(GenderType))), "--Select--", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(x => x.Gender, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(x => x.Address, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(x => x.Address, new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(x => x.DateOfBirth, htmlAttributes: new { @class = "form-label" })
            @Html.TextBoxFor(x => x.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
            @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(x => x.BloodGroup, htmlAttributes: new { @class = "form-label" })
            @Html.DropDownListFor(x => x.BloodGroup, new SelectList(Enum.GetValues(typeof(BloodGroupType))), "--Select--", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(x => x.BloodGroup, "", new { @class = "text-danger" })
        </div>

        @Html.HiddenFor(x => x.UserType, new { @Value = "Patient" })
        @Html.HiddenFor(x => x.Status, new { @Value = "Active" })

        <div class="text-center">
            <input type="submit" value="Register" class="btn btn-primary px-5" />
        </div>
    }
    <div class="text-center mt-3">
        <p>Already have an account? <a href="@Url.Action("Login", "Login")">Login here</a></p>
    </div>

    <script>
        document.getElementById("registerForm").addEventListener("submit", function (e) {
            const errors = [];
            const showError = (msg) => errors.push(msg);

            const FirstName = document.getElementById("FirstName")?.value.trim();
            const LastName = document.getElementById("LastName")?.value.trim();
            const Phone = document.getElementById("Phone")?.value.trim();
            const BloodGroup = document.getElementById("BloodGroup")?.value.trim();
            const DateOfBirth = document.getElementById("DateOfBirth")?.value.trim();
            const Address = document.getElementById("Address")?.value.trim();
            const username = document.getElementById("Email")?.value.trim();
            const password = document.getElementById("Password")?.value.trim();
            const ConfirmPassword = document.getElementById("ConfirmPassword")?.value.trim();

            if (!FirstName || !LastName) {
                showError("First Name and Last Name are required.");
            } else {
                if (!/^[a-zA-Z]+$/.test(FirstName)) showError("First Name must contain only letters.");
                if (!/^[a-zA-Z]+$/.test(LastName)) showError("Last Name must contain only letters.");
            }

            if (!/^\d{11}$/.test(Phone)) {
                showError("Phone number must be exactly 11 digits.");
            }

            if (!BloodGroup) showError("Blood Group is required.");
            if (!DateOfBirth) showError("Date of Birth is required.");
            if (!Address) showError("Address is required.");
            if (!username) showError("Email is required.");
            if (!password) showError("Password is required.");
            if (!ConfirmPassword) showError("Confirm Password is required.");
            if (password !== ConfirmPassword) showError("Passwords do not match.");

            const errorContainer = document.getElementById("errorMessages");
            if (errors.length > 0) {
                e.preventDefault();
                errorContainer.innerHTML = errors.map(err => `<div>${err}</div>`).join('');
                errorContainer.classList.remove("d-none");
            } else {
                errorContainer.classList.add("d-none");
            }
        });
    </script>


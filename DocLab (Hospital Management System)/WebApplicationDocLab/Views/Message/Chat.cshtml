@model IEnumerable<WebApplicationDocLab.Models.Message>
@{
    ViewBag.Title = "Chat";
    Layout = "~/Views/_LayoutPageAdminIndex.cshtml";
    var otherUser = ViewBag.OtherUser as WebApplicationDocLab.Models.User_Info;
    int currentUserId = (int)ViewBag.CurrentUserId;
}

<div class="chat-container">
    <div class="chat-header">
        <div class="user-info">
            <div class="avatar">
                <i class="fas fa-user"></i>
            </div>
            <div>
                <h3>@otherUser.FirstName @otherUser.LastName</h3>
                <p class="status">Online</p>
            </div>
        </div>
    </div>

    <div class="chat-messages" id="messageContainer">
        @foreach (var msg in Model)
        {
            <div class="message @(msg.SenderId == currentUserId ? "sent" : "received")">
                <div class="message-content">
                    <p>@msg.Content</p>
                    <span class="message-time">@msg.SentAt.ToString("hh:mm tt")</span>
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        @using (Html.BeginForm("Send", "Message", FormMethod.Post, new { id = "messageForm" }))
        {
            @Html.Hidden("receiverId", otherUser.Id)
            <div class="input-group">
                <textarea name="content" required placeholder="Type a message..." id="messageInput"></textarea>
                <button type="submit" class="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        }
    </div>
</div>

<!-- CSS -->
<style>
    :root {
        --primary-color: #128C7E;
        --primary-dark: #075E54;
        --primary-light: #25D366;
        --message-sent: #DCF8C6;
        --message-received: #FFFFFF;
        --text-color: #333;
        --text-light: #888;
        --shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    }

    .chat-container {
        max-width: 800px;
        margin: 20px auto;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: var(--shadow);
        display: flex;
        flex-direction: column;
        height: 80vh;
        background-color: #f5f5f5;
    }

    .chat-header {
        background-color: var(--primary-dark);
        color: white;
        padding: 15px 20px;
    }

    .user-info {
        display: flex;
        align-items: center;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        color: var(--primary-dark);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
    }

    .user-info h3 {
        margin: 0;
        font-size: 18px;
    }

    .status {
        margin: 0;
        font-size: 12px;
        color: #eee;
    }

    .chat-messages {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        background-color: #e5ddd5;
        background-image: url('https://web.whatsapp.com/img/bg-chat-tile-light_a4be512e7195b6b733d9110b408f075d.png');
        display: flex;
        flex-direction: column;
    }

    .message {
        max-width: 70%;
        margin-bottom: 15px;
        display: flex;
    }

        .message.sent {
            align-self: flex-end;
        }

        .message.received {
            align-self: flex-start;
        }

    .message-content {
        padding: 10px 15px;
        border-radius: 8px;
        position: relative;
        box-shadow: var(--shadow);
    }

    .message.sent .message-content {
        background-color: var(--message-sent);
        border-top-right-radius: 0;
    }

    .message.received .message-content {
        background-color: var(--message-received);
        border-top-left-radius: 0;
    }

    .message-time {
        display: block;
        text-align: right;
        font-size: 11px;
        color: var(--text-light);
        margin-top: 5px;
    }

    .chat-input {
        background-color: #f0f0f0;
        padding: 15px;
        border-top: 1px solid #ddd;
    }

    .input-group {
        display: flex;
        align-items: center;
    }

    textarea {
        flex: 1;
        border: none;
        border-radius: 20px;
        padding: 12px 15px;
        resize: none;
        outline: none;
        font-family: inherit;
        height: 40px;
        max-height: 100px;
        box-shadow: var(--shadow);
    }

    .send-button {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        margin-left: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

        .send-button:hover {
            background-color: var(--primary-dark);
        }

    /* Scrollbar styling */
    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
</style>
<!-- Use this in your _Layout or view -->
<!-- Replace this -->
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

<!-- With this -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<!-- JavaScript -->
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Auto-scroll to bottom of messages
        function scrollToBottom() {
            const container = $('#messageContainer');
            container.scrollTop(container[0].scrollHeight);
        }

        scrollToBottom();

        // Handle form submission with AJAX
        $('#messageForm').on('submit', function (e) {
            e.preventDefault();

            const form = $(this);
            const messageInput = $('#messageInput');
            const message = messageInput.val().trim();

            if (message) {
                $.ajax({
                    url: form.attr('action'),
                    method: form.attr('method'),
                    data: form.serialize(),
                    success: function (response) {
                        // Add the new message to the chat
                        const newMessage = `
                            <div class="message sent">
                                <div class="message-content">
                                    <p>${message}</p>
                                    <span class="message-time">Just now</span>
                                </div>
                            </div>
                        `;
                        $('#messageContainer').append(newMessage);

                        // Clear input and scroll to bottom
                        messageInput.val('');
                        scrollToBottom();
                    },
                    error: function () {
                        alert('Error sending message');
                    }
                });
            }
        });

        // Auto-resize textarea
        $('#messageInput').on('input', function () {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        // Optional: Poll for new messages (simplified version)
        function checkForNewMessages() {
            // In a real app, you would make an AJAX call to check for new messages
            // and append them to the message container
        }

        // Check every 5 seconds
        setInterval(checkForNewMessages, 5000);
    });
</script>
@{
    ViewBag.Title = "DoctorADD";
    Layout = "~/Views/_LayoutPageAdminIndex.cshtml";
}

@model WebApplicationDocLab.Models.User_Info
@using WebApplicationDocLab.Models
@{
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="~/Page/css/DoctorAdd.css" rel="stylesheet">
}

<div class="doctor-add-container">
    <h2 class="text-center mb-4">Add New Doctor</h2>

    @using (Html.BeginForm("DoctorRegister", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "novalidate", id = "registerForm" }))
    {
        @Html.AntiForgeryToken()
        <div id="errorMessages" class="alert alert-danger d-none" role="alert"></div>

        <div class="form-section">
            <h4>Personal Information</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Title, new { @class = "form-label required-field" })
                    @Html.DropDownListFor(x => x.Title, new SelectList(new[] { "Dr.", "Prof.", "Mr.", "Ms." }), "--Select Title--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Title, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Gender, new { @class = "form-label required-field" })
                    @Html.DropDownListFor(x => x.Gender, new SelectList(Enum.GetValues(typeof(GenderType))), "--Select Gender--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Gender, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.FirstName, new { @class = "form-label required-field" })
                    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.LastName, new { @class = "form-label required-field" })
                    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.DateOfBirth, new { @class = "form-label required-field" })
                    @Html.TextBoxFor(x => x.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
                    @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.BloodGroup, new { @class = "form-label required-field" })
                    @Html.DropDownListFor(x => x.BloodGroup, new SelectList(Enum.GetValues(typeof(BloodGroupType))), "--Select Blood Group--", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.BloodGroup, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-section">
            <h4>Contact Information</h4>
            <div class="mb-3">
                @Html.LabelFor(x => x.Email, new { @class = "form-label required-field" })
                @Html.TextBoxFor(x => x.Email, new { @class = "form-control", type = "email", required = "required" })
                @Html.ValidationMessageFor(x => x.Email, "", new { @class = "text-danger" })
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Password, new { @class = "form-label required-field" })
                    @Html.PasswordFor(x => x.Password, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                    <small class="form-text text-muted">Minimum 8 characters</small>
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.ConfirmPassword, new { @class = "form-label required-field" })
                    @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Phone, new { @class = "form-label required-field" })
                @Html.TextBoxFor(x => x.Phone, new { @class = "form-control", required = "required", pattern = @"\d{11}" })
                @Html.ValidationMessageFor(x => x.Phone, "", new { @class = "text-danger" })
                <small class="form-text text-muted">11 digits without any special characters</small>
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Address, new { @class = "form-label required-field" })
                @Html.TextAreaFor(x => x.Address, new { @class = "form-control", rows = 3, required = "required" })
                @Html.ValidationMessageFor(x => x.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-section">
            <h4>Professional Information</h4>
            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.NID, new { @class = "form-label required-field" })
                    @Html.TextBoxFor(x => x.NID, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.NID, "", new { @class = "text-danger" })
                    <small class="form-text text-muted">National ID number</small>
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.RegistrationNo, new { @class = "form-label required-field" })
                    @Html.TextBoxFor(x => x.RegistrationNo, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.RegistrationNo, "", new { @class = "text-danger" })
                    <small class="form-text text-muted">Medical registration number</small>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(x => x.Department, new { @class = "form-label required-field" })
                    @Html.TextBoxFor(x => x.Department, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Department, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(x => x.DocType, "Doctor Type", new { @class = "form-label required-field" })
                    @Html.DropDownListFor(x => x.DocType, (SelectList)ViewBag.DoctorTypeName, "Select Doctor Type", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.DocType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Status, "Status", new { @class = "form-label required-field" })
                @Html.DropDownListFor(x => x.Status, new SelectList(Enum.GetValues(typeof(UserStatus))), "--Select Status--", new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(x => x.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-section">
            <h4>Profile Image</h4>
            <div class="mb-3">
                <label for="ImageFile" class="form-label required-field">Profile Image</label>
                <input type="file" id="ImageFile" name="ImageFile" class="form-control" accept="image/DoctorImage/*" required />
                <small class="form-text text-muted">Please upload a clear photo (JPEG, PNG)</small>
                <div class="mt-2">
                    <img src="@(Model != null && !string.IsNullOrEmpty(Model.Image) ? Url.Content("~/image/DoctorImage" + Model.Image) : "#")"
                         alt="Profile Preview"
                         class="img-thumbnail profile-image-preview @(Model != null && !string.IsNullOrEmpty(Model.Image) ? "" : "default.png")" />
                    @if (Model != null && !string.IsNullOrEmpty(Model.Image))
                    {
                        <input type="hidden" name="image" value="@Model.Image" />
                    }
                </div>
                @Html.ValidationMessage("ImageFile", "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(x => x.UserType, new { @Value = "Doctor" })

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary px-5 py-2">
                <i class="fas fa-user-plus me-2"></i> Add Doctor
            </button>
            <a href="@Url.Action("DoctorList", "Admin")" class="btn btn-secondary px-5 py-2 ms-3">
                <i class="fas fa-list me-2"></i> View Doctors
            </a>
        </div>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Add required field indicators
        $('label[for]').each(function () {
            const forAttr = $(this).attr('for');
            if ($('#' + forAttr).prop('required')) {
                $(this).addClass('required-field');
            }
        });

        $('#Phone').on('input', function () {
            const phone = $(this).val();
            if (!/^\d{11}$/.test(phone)) {
                $(this).addClass('is-invalid');
                $(this).next('.text-danger').text('Phone must be exactly 11 digits');
            } else {
                $(this).removeClass('is-invalid');
                $(this).next('.text-danger').text('');
            }
        });



        $('#Password').on('input', function () {
            const password = $(this).val();
            if (password.length < 8) {
                $(this).addClass('is-invalid');
                $(this).next('.text-danger').text('Password must be at least 8 characters');
            } else {
                $(this).removeClass('is-invalid');
                $(this).next('.text-danger').text('');
            }
        });

        $('#ConfirmPassword').on('input', function () {
            const confirmPassword = $(this).val();
            const password = $('#Password').val();
            if (confirmPassword !== password) {
                $(this).addClass('is-invalid');
                $(this).next('.text-danger').text('Passwords do not match');
            } else {
                $(this).removeClass('is-invalid');
                $(this).next('.text-danger').text('');
            }
        });
        // Image preview
        $('#ImageFile').change(function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    $('.profile-image-preview').attr('src', e.target.result).removeClass('d-none');
                }
                reader.readAsDataURL(file);
            }
        });

        // Form submission
        $('#registerForm').submit(function (e) {
            let isValid = true;

            // Validate required fields
            $('[required]').each(function () {
                if (!$(this).val()) {
                    $(this).addClass('is-invalid');
                    isValid = false;
                }
            });

            // Validate password match
            if ($('#Password').val() !== $('#ConfirmPassword').val()) {
                $('#ConfirmPassword').addClass('is-invalid');
                isValid = false;
            }

            // Validate date of birth (at least 25 years old)
            const dob = new Date($('#DateOfBirth').val());
            const today = new Date();
            const minAgeDate = new Date(today.getFullYear() - 25, today.getMonth(), today.getDate());

            if (dob >= minAgeDate) {
                $('#DateOfBirth').addClass('is-invalid');
                $('#DateOfBirth').next('.text-danger').text('Doctor must be at least 25 years old');
                isValid = false;
            }

            if (!isValid) {
                e.preventDefault();
                $('#errorMessages').html('<strong>Please fix the following errors:</strong><ul><li>Some required fields are missing or invalid</li></ul>')
                    .removeClass('d-none')
                    .addClass('show');

                $('html, body').animate({
                    scrollTop: $('#errorMessages').offset().top - 100
                }, 500);
            }
        });
    });
</script>

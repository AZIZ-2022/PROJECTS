@model WebApplicationDocLab.Models.User_Info
@using WebApplicationDocLab.Models
    @{
        ViewBag.Title = "EditAdmin";
        Layout = "~/Views/_LayoutPageAdminIndex.cshtml";
    }
<link href="~/Page/css/Edit_Admin.css" rel="stylesheet">
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col-12">
                <nav aria-label="breadcrumb" class="bg-light rounded-3 p-2 d-inline-block">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Details", new { id = Model.Id })">Profile</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Edit</li>
                    </ol>
                </nav>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="mb-0">Edit Personal Information</h5>
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm("EditAdmin", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.Id)

                            <div class="row mb-3">
                                <div class="col-md-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Title, new { @class = "form-label" })
                                        @Html.DropDownListFor(model => model.Title, new SelectList(new[] { "Mr.", "Mrs.", "Ms.", "Dr.", "Prof." }), "Select Title", new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FirstName, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LastName, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DateOfBirth, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                        @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Gender, new { @class = "form-label" })
                                        @Html.DropDownListFor(x => x.Gender, new SelectList(Enum.GetValues(typeof(GenderType))), "--Select Gender--", new { @class = "form-control", required = "required" })
                                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Address, new { @class = "form-label" })
                                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = 3 })
                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.BloodGroup, new { @class = "form-label" })
                                        @Html.DropDownListFor(x => x.BloodGroup, new SelectList(Enum.GetValues(typeof(BloodGroupType))), "--Select Blood Group--", new { @class = "form-control", required = "required" })
                                        @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.NID, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.NID, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.NID, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.RegistrationNo, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.RegistrationNo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.RegistrationNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Department, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.Department, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DocType, new { @class = "form-label" })
                                        @Html.DropDownListFor(x => x.DocType, (SelectList)ViewBag.DoctorTypeName, "Select Doctor Type", new { @class = "form-control", required = "required" })
                                        @Html.ValidationMessageFor(model => model.DocType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control", type = "email" })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label">Profile Image</label>
                                        <input type="file" name="ImageFile" class="form-control" accept="image/AdminImage/*" />
                                        <small class="text-muted">Leave empty to keep current image</small>
                                        @Html.HiddenFor(model => model.Image)
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", id = "passwordField", type = "password" })
                                            <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.ConfirmPassword, new { @class = "form-control", id = "confirmPasswordField", type = "password" })
                                                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            </div>
                                            <span id="passwordMatchMessage" class="text-danger"></span>
                                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>


                                <div class="row">
                                    <div class="col-12">
                                        <div class="d-flex justify-content-end gap-2">
                                            <a href="@Url.Action("Details", new { id = Model.Id })" class="btn btn-secondary">Cancel</a>
                                            <button type="submit" class="btn btn-primary">Save Changes</button>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        }

                        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
                        <script>
                            $(document).ready(function () {
                                // Password toggle
                                $('#togglePassword').click(function () {
                                    const passwordField = $('#passwordField');
                                    const icon = $(this).find('i');

                                    if (passwordField.attr('type') === 'password') {
                                        passwordField.attr('type', 'text');
                                        icon.removeClass('bi-eye').addClass('bi-eye-slash');
                                    } else {
                                        passwordField.attr('type', 'password');
                                        icon.removeClass('bi-eye-slash').addClass('bi-eye');
                                    }
                                });

                                // Confirm Password toggle
                                $('#toggleConfirmPassword').click(function () {
                                    const confirmPasswordField = $('#confirmPasswordField');
                                    const icon = $(this).find('i');

                                    if (confirmPasswordField.attr('type') === 'password') {
                                        confirmPasswordField.attr('type', 'text');
                                        icon.removeClass('bi-eye').addClass('bi-eye-slash');
                                    } else {
                                        confirmPasswordField.attr('type', 'password');
                                        icon.removeClass('bi-eye-slash').addClass('bi-eye');
                                    }
                                });

                                // Password match validation
                                $('#confirmPasswordField').on('keyup', function () {
                                    const password = $('#passwordField').val();
                                    const confirmPassword = $(this).val();
                                    const message = $('#passwordMatchMessage');

                                    if (password !== confirmPassword) {
                                        message.text("Passwords do not match!");
                                    } else {
                                        message.text("");
                                    }
                                });

                                // Form submission validation
                                $('form').submit(function (e) {
                                    const password = $('#passwordField').val();
                                    const confirmPassword = $('#confirmPasswordField').val();

                                    if (password !== confirmPassword) {
                                        e.preventDefault();
                                        $('#passwordMatchMessage').text("Passwords must match!").addClass('text-danger');
                                        return false;
                                    }
                                    return true;
                                });
                            });

                        </script>
@model WebApplicationDocLab.Models.User_Info
@{
    ViewBag.Title = "Forgot Password";
    Layout = "~/Views/_LayoutPageLogin.cshtml";
}
<link href="~/Page/css/ForgotPass.css" rel="stylesheet">

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Forgot Password</h4>
                </div>
                <div class="card-body">
                    @if (ViewBag.Success != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show">
                            @ViewBag.Success
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (ViewBag.Error != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show">
                            @ViewBag.Error
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @using (Html.BeginForm("ForgotPassword", "Login", FormMethod.Post, new { @id = "emailForm" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <input type="email" name="email" id="email" class="form-control"
                                   value="@ViewBag.Email" required placeholder="Enter your registered email" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100 py-2">
                            <i class="bi bi-send-fill me-2"></i>Send OTP
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />
</div>

<!-- OTP Modal -->
<div class="modal fade" id="otpModal" tabindex="-1" aria-labelledby="otpModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="otpModalLabel">Verify OTP</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p>We've sent a 6-digit verification code to <strong>@ViewBag.Email</strong></p>

                <form id="otpForm" method="post" action="@Url.Action("EnterResetOtp", "Login")">
                    @Html.AntiForgeryToken()
                    <div class="d-flex justify-content-center mb-4">
                        @for (int i = 0; i < 6; i++)
                        {
                            <input type="text" maxlength="1" class="form-control otp-input mx-1 text-center"
                                   required autocomplete="off" pattern="[0-9]" inputmode="numeric" />
                        }
                    </div>
                    <input type="hidden" name="otp" id="finalOtp" />

                    <div class="mb-3">
                        <div class="d-flex justify-content-center align-items-center">
                            <span class="me-2">Time remaining:</span>
                            <div class="text-danger fw-bold" id="timer">05:00</div>
                        </div>
                    </div>

                    <button type="button" id="resendBtn" class="btn btn-link text-decoration-none d-none" onclick="resendOtp()">
                        <i class="bi bi-arrow-clockwise me-1"></i>Resend OTP
                    </button>

                    <div class="d-grid gap-2 mt-3">
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-check-circle me-2"></i>Verify
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Reset Password Modal -->
<div class="modal fade" id="resetModal" tabindex="-1" aria-labelledby="resetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="resetModalLabel">Reset Password</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" action="@Url.Action("ResetPassword", "Login")">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" name="newPassword" id="newPassword" class="form-control"
                               required placeholder="Enter new password" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" name="confirmPassword" id="confirmPassword" class="form-control"
                               required placeholder="Confirm new password" />
                        @*<div class="invalid-feedback" id="passwordMatchError">Passwords do not match</div>*@
                    </div>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-info">
                            <i class="bi bi-key me-2"></i>Reset Password
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
</style>

<script>
       document.addEventListener("DOMContentLoaded", function () {
    // Initialize OTP inputs
    const otpInputs = document.querySelectorAll(".otp-input");
    const finalOtpInput = document.getElementById("finalOtp");

    if (otpInputs && otpInputs.length > 0) {
        otpInputs.forEach((input, index) => {
            // Focus first empty input
            if (index === 0) input.focus();

            input.addEventListener("input", function () {
                // Allow only numbers
                this.value = this.value.replace(/\D/g, '');

                // Auto-focus next input
                if (this.value && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });

            // Handle backspace and left arrow
            input.addEventListener("keydown", function (e) {
                if (e.key === "Backspace" && !this.value && index > 0) {
                    otpInputs[index - 1].focus();
                } else if (e.key === "ArrowLeft" && index > 0) {
                    otpInputs[index - 1].focus();
                } else if (e.key === "ArrowRight" && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });
        });

        // Combine OTP values before form submission
        const otpForm = document.getElementById("otpForm");
        if (otpForm) {
            otpForm.addEventListener("submit", function () {
                let otp = "";
                otpInputs.forEach(input => otp += input.value);
                if (finalOtpInput) {
                    finalOtpInput.value = otp;
                }
            });
        }
    }

    // Password match validation
    const newPassword = document.getElementById("newPassword");
    const confirmPassword = document.getElementById("confirmPassword");
    const passwordMatchError = document.getElementById("passwordMatchError");

    if (confirmPassword && newPassword) {
        confirmPassword.addEventListener("input", function () {
            if (newPassword.value == confirmPassword.value) {
                confirmPassword.classList.remove("is-invalid");
                passwordMatchError.style.display = "none";
            } else {
                confirmPassword.classList.add("is-invalid");
                passwordMatchError.style.display = "block";
            }
        });
    }

    // Show modals if needed
    const showOtpModal = @((ViewBag.ShowOtpModal ?? false).ToString().ToLower());
    const showResetModal = @((ViewBag.ShowResetModal ?? false).ToString().ToLower());

    if (showOtpModal) {
        const otpModalElement = document.getElementById("otpModal");
        if (otpModalElement) {
            const otpModal = new bootstrap.Modal(otpModalElement);
            otpModal.show();
            startOtpTimer(5 * 60); // 5 minutes
        }
    }

    if (showResetModal) {
        const resetModalElement = document.getElementById("resetModal");
        if (resetModalElement) {
            new bootstrap.Modal(resetModalElement).show();
        }
    }
});

// OTP Timer functionality
let otpTimerInterval;

function startOtpTimer(durationInSeconds) {
    const timerElement = document.getElementById("timer");
    const resendBtn = document.getElementById("resendBtn");

    if (!timerElement || !resendBtn) return;

    let minutes, seconds;
    let remainingTime = durationInSeconds;

    // Clear any existing timer
    if (otpTimerInterval) {
        clearInterval(otpTimerInterval);
    }

    // Hide resend button initially
    resendBtn.classList.add("d-none");

    // Update timer immediately
    updateTimer();

    // Start countdown
    otpTimerInterval = setInterval(function () {
        remainingTime--;
        updateTimer();

        if (remainingTime <= 0) {
            clearInterval(otpTimerInterval);
            resendBtn.classList.remove("d-none");
        }
    }, 1000);

    function updateTimer() {
        minutes = Math.floor(remainingTime / 60);
        seconds = remainingTime % 60;

        timerElement.textContent =
            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        // Change color when time is running out
        if (remainingTime <= 30) {
            timerElement.classList.add("text-danger");
            timerElement.classList.remove("text-warning");
        } else if (remainingTime <= 60) {
            timerElement.classList.add("text-warning");
            timerElement.classList.remove("text-danger");
        }
    }
}

function resendOtp() {
    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    if (!token) {
        console.error('CSRF token not found');
        return;
    }

    fetch('@Url.Action("ResendOtp", "Login")', {
        method: 'POST',
        headers: {
            'RequestVerificationToken': token,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify({ email: '@ViewBag.Email' })
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                const modalBody = document.querySelector("#otpModal .modal-body");
                if (modalBody) {
                    const existingAlert = modalBody.querySelector('.alert');
                    if (existingAlert) {
                        existingAlert.remove();
                    }

                    const alertDiv = document.createElement("div");
                    alertDiv.className = "alert alert-success alert-dismissible fade show mt-3";
                    alertDiv.innerHTML = `
                            New OTP has been sent to your email.
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        `;
                    modalBody.insertBefore(alertDiv, modalBody.firstChild);
                }

                // Restart timer
                startOtpTimer(5 * 60);
            } else {
                alert("Failed to resend OTP. Please try again.");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("An error occurred while resending OTP.");
        });
}
</script>